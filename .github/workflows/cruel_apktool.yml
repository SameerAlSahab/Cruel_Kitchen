name: Cruel Kitchen's ApkTool Automated Build

on:
  workflow_dispatch:
    inputs:
      apk_link:
        description: 'APK direct download link (required if no JAR or JAR link provided)'
        required: false
        type: string
      jar_link:
        description: 'JAR direct download link (required if no APK or APK link provided)'
        required: false
        type: string
      patch_zip_link:
        description: 'Patch ZIP file direct download link (must contain one or more .patch files, no extra folders)'
        required: true
        type: string
      use_framework_res:
        description: 'Use framework_res.apk?'
        required: false
        type: boolean
        default: false
      framework_res_link:
        description: 'Framework-res.apk direct download link (required if "use framework_res.apk" is ON)'
        required: false
        type: string
      target_sdk:
        description: 'Target SDK version (e.g., 34 for Android 14)'
        required: false
        type: number
        default: 34

jobs:
  cruel_kitchen:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate input (require one of APK/JAR)
        id: validate
        run: |
          set -e
          APK="${{ github.event.inputs.apk_link }}"
          JAR="${{ github.event.inputs.jar_link }}"
          if [[ -z "$APK" && -z "$JAR" ]]; then
            echo "::error::Either APK or JAR link must be provided."
            exit 1
          fi

      - name: Ensure patch zip input is valid
        run: |
          PATCH_ZIP="${{ github.event.inputs.patch_zip_link }}"
          if [[ -z "$PATCH_ZIP" ]]; then
            echo "::error::Patch zip link is required."
            exit 1
          fi

      - name: Download APK/JAR
        run: |
          mkdir -p input_apk
          if [[ -n "${{ github.event.inputs.apk_link }}" ]]; then
            wget -O input_apk/input.apk "${{ github.event.inputs.apk_link }}"
            echo "APK downloaded."
          elif [[ -n "${{ github.event.inputs.jar_link }}" ]]; then
            wget -O input_apk/input.jar "${{ github.event.inputs.jar_link }}"
            echo "JAR downloaded."
          fi

      - name: Download Patch ZIP
        run: |
          mkdir -p resources/patches/patchset
          wget -O patch.zip "${{ github.event.inputs.patch_zip_link }}"
          unzip -j patch.zip '*.patch' -d resources/patches/patchset/
          count=$(ls resources/patches/patchset/*.patch 2>/dev/null | wc -l)
          if [[ $count -eq 0 ]]; then
            echo "::error::Patch zip must contain at least one .patch file."
            exit 1
          fi

      - name: Conditionally download framework_res.apk
        if: ${{ github.event.inputs.use_framework_res == 'true' }}
        run: |
          if [[ -z "${{ github.event.inputs.framework_res_link }}" ]]; then
            echo "::error::framework_res.apk link is required if use_framework_res is ON."
            exit 1
          fi
          mkdir -p framework_res
          wget -O framework_res/framework_res.apk "${{ github.event.inputs.framework_res_link }}"

      - name: List files for debugging
        run: |
          echo "APK/JAR files:"
          ls -lh input_apk || true
          echo "Patch files:"
          ls -lh resources/patches/patchset/ || true
          if [[ -d framework_res ]]; then
            echo "Framework-res:"
            ls -lh framework_res/ || true
          fi
          echo "APKTool:"
          ls -lh external/apktool/ || true

      - name: Make script executable
        run: chmod +x cruel_script.sh

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip zip openjdk-17-jre-headless patch expect wget

      - name: Run Cruel Kitchen Script (auto mode)
        env:
          PATCH_SET: "patchset"
        run: |
          # Create required directories
          mkdir -p output_apk workspace
          
          # Configure paths
          export INPUT_DIR="$PWD/input_apk"
          export OUTPUT_DIR="$PWD/output_apk"
          export WORK_ROOT="$PWD/workspace"
          export PATCHES_DIR="$PWD/resources/patches"
          
          # Handle framework_res if needed
          if [[ "${{ github.event.inputs.use_framework_res }}" == "true" ]]; then
            export RES_DIR="$PWD/framework_res"
          fi
          
          # Create expect script
          cat > auto_script.exp << 'EOF'
#!/usr/bin/expect -f

set timeout 120

spawn ./cruel_script.sh

# Wait for main menu
expect "Enter your choice"

# Select decompile option (1)
send "1\r"
expect "Select file"
send "1\r"

# Handle decompile result
expect {
  "Press enter to continue..." { send "\r" }
  "Operation failed. Press enter to continue..." { 
    send "\r"
    exit 1
  }
  timeout { exit 1 }
}

# Change SDK if needed
expect "Enter your choice"
if { "$env(TARGET_SDK)" != "" } {
  send "6\r"
  expect "Enter SDK version"
  send "$env(TARGET_SDK)\r"
  expect "Press enter to continue..."
  send "\r"
  expect "Enter your choice"
}

# Select patch set
send "2\r"
expect "Select patch set"
send "1\r"

# Handle patch set selection
expect {
  "Press enter to continue..." { send "\r" }
  "No patch sets available. Press enter to continue..." { 
    send "\r"
    exit 1
  }
  timeout { exit 1 }
}

# Apply patches
expect "Enter your choice"
send "3\r"

# Handle patch result
expect {
  "Press enter to continue..." { send "\r" }
  "Patching completed with errors. Press enter to continue..." { 
    send "\r"
    # Continue even with patch errors
  }
  timeout { exit 1 }
}

# Rebuild
expect "Enter your choice"
send "4\r"

# Handle rebuild result
expect {
  "Press enter to continue..." { send "\r" }
  "Rebuild failed. Press enter to continue..." { 
    send "\r"
    exit 1
  }
  timeout { exit 1 }
}

# Clean workspace
expect "Enter your choice"
send "5\r"
expect "Press enter to continue..."
send "\r"

# Exit
expect "Enter your choice"
send "7\r"
expect eof
EOF

          # Set SDK from input
          export TARGET_SDK="${{ github.event.inputs.target_sdk }}"
          
          # Make expect script executable and run
          chmod +x auto_script.exp
          ./auto_script.exp

      - name: Upload rebuilt APK/JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: rebuilt_apk_or_jar
          path: output_apk/rebuilt_*
          if-no-files-found: error
